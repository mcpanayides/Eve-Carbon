"""
Django settings for evecarbon project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Import your secrets module (you already use this pattern)
try:
    from secrets import (
        EVE_CLIENT_ID,
        EVE_CLIENT_SECRET,
        EVE_CALLBACK_URL,
        EVE_ALLOWED_ALLIANCE_IDS,
        EVE_ALLOWED_CORPORATION_IDS,
        EVE_CHARACTER_ACL,
    )
except Exception:
    # let manage.py collectstatic/migrate still run even if secrets missing
    EVE_CLIENT_ID = EVE_CLIENT_SECRET = EVE_CALLBACK_URL = ""
    EVE_ALLOWED_ALLIANCE_IDS = []
    EVE_ALLOWED_CORPORATION_IDS = []
    EVE_CHARACTER_ACL = []

INSTALLED_APPS = [
    # ...
    "evecarbon.auth_sso",
]
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/ 

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mdy3*x5shbb6oe-do=t64=lw!5p45)pe9qb%ji*n0)_n2iiv7s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',  # Add this for PostgreSQL support
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',    # Required for social accounts
    'allauth.socialaccount.providers.eveonline', # EVE Online specific apps
    'allauth.socialaccount.providers.discord', # Discord provider for social login will be used for cross-referencing
    'evecarbon',  # Your main app
    'evecarbon.auth_sso', #auth_app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',  # Optional: for internationalization
    'django.middleware.gzip.GZipMiddleware',  # Optional: for compression
    'django.middleware.cache.UpdateCacheMiddleware',  # Optional: for caching
    'django.middleware.cache.FetchFromCacheMiddleware',  # Optional: for caching
    'django.middleware.security.SecurityMiddleware',  # Optional: for security enhancements
    'django.middleware.http.ConditionalGetMiddleware',  # Optional: for conditional GET support"
    'allauth.account.middleware.AccountMiddleware',  # Required for allauth
]

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'eveonline': {
        # EVE Online provider settings
        'APP': {
            'client_id': client_id,
            'secret': client_secret,
            'key': callback_url
        }
    }
}

LOGIN_REDIRECT_URL = '/'

ROOT_URLCONF = 'evecarbon.urls'
# Make sure templates can find our simple pages
TEMPLATES[0]["DIRS"] = TEMPLATES[0].get("DIRS", []) + [os.path.join(BASE_DIR, "evecarbon", "auth_sso", "templates")]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1 # Required for allauth

WSGI_APPLICATION = 'evecarbon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'mydatabase'),
        'USER': os.getenv('DB_USER', 'myuser'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'mypassword'),
        'HOST': os.getenv('DB_HOST', 'db'),  # Important: 'db' = service name in docker-compose
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
